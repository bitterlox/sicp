(define (fast-expt base e)
  (define (even? n) (= (remainder n 2) 0))
  (define (fe-iter a b n ncalls)
    ;(display a) (display " - ") (display b) (display " - ") (display n) (newline)
    (cond
      ((< n 1) 
       (display "| ") (display e) (display " | ") (display ncalls) (display " | ") (newline)
       0)
      ((even? n) (fe-iter b (square b) (/ n 2) (+ ncalls 1)))
      (else (fe-iter (* a b) b (- n 1) (+ ncalls 1)))))
  (fe-iter 1 base e 1))

(define (test-num-steps) 
  (display "| n | calls |") (newline)
  (display "| --- | --- |") (newline)
  (fast-expt 2 10)
  (fast-expt 2 100)
  (fast-expt 2 1000)
  (fast-expt 2 10000)
  (fast-expt 2 100000)
  (fast-expt 2 1000000))
