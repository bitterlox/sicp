(define (* aa bb)
  (define (even? n) (= (remainder n 2) 0))
  (define (double x) (+ x x))
  (define (halve x) (/ x 2))
  (define (mul a b step) 
    (cond
      ((= b 1) 
        (display "| ") (display bb) (display " | ") (display step) (display " |") (newline)
       a)
      ((even? b) 
       (mul (double a) (halve b) (+ step 1)))
      (else (+ a (mul a (- b 1) (+ step 1))))))
  (mul aa bb 1))

(define (test-steps) 
  (display "| ") (display "b") (display " | ") (display "step") (display " |") (newline)
  (display "| ") (display "---") (display " | ") (display "---") (display " |") (newline)
  (* 2 12)
  (* 2 120)
  (* 2 1200)
  (* 2 12000)
  (* 2 120000)
  (* 2 1200000)
  (* 2 12000000)
  (* 2 120000000)
  (* 2 1200000000))
